<?php
declare(ENCODING = 'utf-8') ;
namespace Erfurt\Tests\Unit;
/***************************************************************
 *  Copyright notice
 *
 *  (c) 2011 Thomas Maroschik <tmaroschik@dfau.de>
 *  All rights reserved
 *
 *  This class is a port of the corresponding class of the
 *  {@link http://aksw.org/Projects/Erfurt Erfurt} project.
 *  All credits go to the Erfurt team.
 *
 *  This script is part of the TYPO3 project. The TYPO3 project is
 *  free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  The GNU General Public License can be found at
 *  http://www.gnu.org/copyleft/gpl.html.
 *
 *  This script is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  This copyright notice MUST APPEAR in all copies of the script!
 ***************************************************************/
/**
 * Test class for \Erfurt\Versioning.
 * Generated by PHPUnit on 2008-12-18 at 21:54:10.
 */
class KnowledgeBaseTest extends BaseTestCase {

	public function testAddOpenIdUser() {
		$user = 'http://openid.example.org/exampleuser';
		$email = 'me@example.org';
		$label = 'Example User';
		$group = 'http://example.org/DefaultGroup';

		$accessControlConfig = $this->objectManager->get('\Erfurt\Configuration\AccessControlConfiguration');
		$acModelUri = $accessControlConfig->modelUri;

		$acModelStub = new \Erfurt\Tests\Unit\Rdf\ModelStub($acModelUri);

		$appMock = $this->getAccessibleMock('\Erfurt\KnowledgeBase', array('getAccessControlModel'), array(), '', false);
		$appMock->start();
		$appMock->expects($this->once())
				->method('getAccessControlModel')
				->will($this->returnValue($acModelStub));

		$retVal = $appMock->addOpenIdUser($user, $email, $label, $group);

		$this->assertTrue(isset($acModelStub->getStore()->statements[$acModelUri][$user]));
		$this->assertTrue(isset($acModelStub->getStore()->statements[$acModelUri][$group]));
		$this->assertEquals(3, count($acModelStub->getStore()->statements[$acModelUri][$user]));
		$this->assertEquals(1, count($acModelStub->getStore()->statements[$acModelUri][$group]));
		$this->assertTrue($retVal);
	}

	public function testAddUser() {
		$user = 'TestUser';
		$userUri = 'http://localhost/OntoWiki/Config/TestUser';
		$pw = 'testpass';
		$email = 'me@example.org';
		$group = 'http://example.org/DefaultGroup';

		$accessControlConfig = $this->objectManager->get('\Erfurt\Configuration\AccessControlConfiguration');
		$acModelUri = $accessControlConfig->modelUri;

		$acModelStub = new \Erfurt\Tests\Unit\Rdf\ModelStub($acModelUri);

		$appMock = $this->getAccessibleMock('\Erfurt\KnowledgeBase', array('getAccessControlModel'), array(), '', false);
		$appMock->expects($this->once())
				->method('getAccessControlModel')
				->will($this->returnValue($acModelStub));

		$retVal = $appMock->addUser($user, $pw, $email, $group);

		$this->assertTrue(isset($acModelStub->getStore()->statements[$acModelUri][$userUri]));
		$this->assertTrue(isset($acModelStub->getStore()->statements[$acModelUri][$group]));
		$this->assertEquals(4, count($acModelStub->getStore()->statements[$acModelUri][$userUri]));
		$this->assertEquals(1, count($acModelStub->getStore()->statements[$acModelUri][$group]));
		$this->assertTrue($retVal);
	}

	public function testAuthenticateWithDefaultAnonymous() {
		// Authenticate as Anonymous
		$result = $this->objectManager->get('\Erfurt\KnowledgeBase')->authenticate();
		$this->assertTrue($result->isValid());
		$identity = $result->getIdentity();
		$this->assertEquals('Anonymous', $identity->getUsername());
	}

	public function testAuthenticateWithExplicitAnonymous() {
		// Authenticate as Anonymous
		$result = $this->objectManager->get('\Erfurt\KnowledgeBase')->authenticate('Anonymous');
		$this->assertTrue($result->isValid());
		$identity = $result->getIdentity();
		$this->assertEquals('Anonymous', $identity->getUsername());
	}

	public function testAuthenticateWithAdmin() {
		$this->markTestNeedsDatabase();

		// Authenticate as Anonymous
		$result =$this->objectManager->get('\Erfurt\KnowledgeBase')->authenticate('Admin');
		$this->assertTrue($result->isValid());
		$identity = $result->getIdentity();
		$this->assertEquals('Admin', $identity->getUsername());
	}

	public function testAuthenticateWithAdminWrongPassword() {
		$this->markTestNeedsDatabase();

		// Authenticate as Anonymous
		$result = $this->objectManager->get('\Erfurt\KnowledgeBase')->authenticate('Admin', 'theWrongPassword');
		$this->assertFalse($result->isValid());
	}

	public function testAuthenticateWithDefaultSuperAdmin() {
		$this->markTestNeedsDatabase();

		// Authenticate as Anonymous
		$result = $this->objectManager->get('\Erfurt\KnowledgeBase')->authenticate($this->getDbUser(), $this->getDbPassword());
		$this->assertTrue($result->isValid());
		$identity = $result->getIdentity();
		$this->assertEquals('SuperAdmin', $identity->getUsername());
	}

	public function testAuthenticateWithOpenIdWillFail() {
		$this->markTestNeedsDatabase();

		// OpenId for a user that does not exist!
		$openId = 'http://thisisnotanopenidprovider.com/fakeOpenId';
		$verifyUrl = 'http://doesnotmatterhere.com';
		$redirectUrl = 'http://doesnotmatterhere.com';

		$result = $this->objectManager->get('\Erfurt\KnowledgeBase')->authenticateWithOpenId($openId, $verifyUrl, $redirectUrl);

		$this->assertTrue($result instanceof \Zend_Auth_Result);
		$this->assertFalse($result->isValid());

		// Erfurt (versioning) needs a user...
		$this->authenticateAnonymous();

		// Now we add the user, so we can test whether a non existing provider url also fails.
		 $this->objectManager->get('\Erfurt\KnowledgeBase')->addOpenIdUser($openId);

		$result = $this->objectManager->get('\Erfurt\KnowledgeBase')->authenticateWithOpenId($openId, $verifyUrl, $redirectUrl);
		$this->assertTrue($result instanceof \Zend_Auth_Result);
		$this->assertFalse($result->isValid());

		// We only test cases here that will fail, for otherwise we would be redirected!
	}

	public function testGetAc() {
		$ac = $this->objectManager->get('\Erfurt\KnowledgeBase')->getAccessControl();

		if (!($ac instanceof \Erfurt\AccessControl\Standard)) {
			$this->fail();
		}
	}

	public function testGetAccessControlModel() {
		$accessControlConfig = $this->objectManager->get('\Erfurt\Configuration\AccessControlConfiguration');
		$acModelUri = $accessControlConfig->modelUri;

		$storeMock = $this->getAccessibleMock('\Erfurt\Store\Store',
									array('getModel'),
									array(),
									'',
									false
		);

		$storeMock->expects($this->once())
				->method('getModel')
				->will($this->returnValue(new \Erfurt\Rdf\Model($acModelUri)));

		$appMock = $this->getAccessibleMock('\Erfurt\KnowledgeBase',
								  array('getStore'),
								  array(),
								  '',
								  false
		);
		$appMock->loadConfig();

		$appMock->expects($this->once())
				->method('getStore')
				->will($this->returnValue($storeMock));

		$acModel = $appMock->getAccessControlModel();

		if (!($acModel instanceof \Erfurt\Rdf\Model)) {
			$this->fail();
		}

		$this->assertEquals($acModelUri, $acModel->getModelUri());
	}

	public function testGetActionConfig() {
		$acMock = $this->getAccessibleMock('\Erfurt\AccessControl\Standard', array('getActionConfig'));
		$appMock = $this->getAccessibleMock('\Erfurt\KnowledgeBase', array('getAc'), array(), '', false);

		$appMock->expects($this->once())
				->method('getAccessControl')
				->will($this->returnValue($acMock));

		$acMock->expects($this->once())
				->method('getActionConfig');

		$appMock->getActionConfig(array());
	}

	public function testGetAuth() {
		$auth = $this->objectManager->get('\Erfurt\KnowledgeBase')->getAuthentication();
		$this->assertTrue($auth instanceof \Zend_Auth);
	}

	public function testGetCache() {
		$cache = $this->objectManager->get('\Erfurt\KnowledgeBase')->getCache();
		$this->assertTrue($cache instanceof \Erfurt\Cache\Frontend\ObjectCache);
	}

	public function testGetCacheWithLifetime() {
		$cacheConfiguration = $this->objectManager->get('\Erfurt\Configuration\CacheConfiguration');
		$cacheConfiguration->lifetime = 3600;

		$cache = $this->objectManager->get('\Erfurt\KnowledgeBase')->getCache();
		$this->assertTrue($cache instanceof \Erfurt\Cache\Frontend\ObjectCache);
	}

	public function testGetCacheWithDatabaseCacheBackend() {
		$cacheConfiguration = $this->objectManager->get('\Erfurt\Configuration\CacheConfiguration');
		$cacheConfiguration->enable = true;
		$cacheConfiguration->type = 'database';

		$cache = $this->objectManager->get('\Erfurt\KnowledgeBase')->getCache();
		$this->assertTrue($cache instanceof \Erfurt\Cache\Frontend\ObjectCache);
	}

	public function testGetCacheWithSqliteCacheBackendSuccess() {
		$configOptions = array(
			'cache' => array(
				'sqlite' => array(
					'dbname' => 'cache.sqlite'
				)
			)
		);

		$tmpConfig = new \Zend_Config($configOptions);

		$app = \Erfurt\KnowledgeBase::getInstance(false)->start($tmpConfig);
		$config = $app->getConfig();
		$cacheConfiguration->enable = true;
		$cacheConfiguration->type = 'sqlite';
		$cacheConfiguration->sqlite->dbname = 'cache.sqlite';

		$cache = $app->getCache();
		$this->assertTrue($cache instanceof \Erfurt\Cache\Frontend\ObjectCache);
	}

	public function testGetCacheDir() {
		$app = \Erfurt\KnowledgeBase::getInstance();
		$config = $app->getConfig();

		$cachePath = $app->getCacheDir();
		$this->assertFalse($cachePath);

		$cacheConfiguration->path = 'cache/';

		// Check if cache dir is writeable. If not, skip the test because of
		// getCacheDir returned false.
		if (false === is_writable($cacheConfiguration->path)) {
			$this->markTestSkipped('Cache dir ' . $cacheConfiguration->path . ' isnt writeable.');
		}
		else
		{
			$cachePath = $app->getCacheDir();
			$this->assertEquals(EF_BASE . 'cache/', $cachePath);
		}
	}

	public function testGetConfig() {
		$config = \Erfurt\KnowledgeBase::getInstance()->getConfig();
		$this->assertTrue($config instanceof Zend_Config_Ini);
	}

	public function testGetConfigWithoutLoadedConfig() {
		\Erfurt\KnowledgeBase::reset();

		try {
			$config = \Erfurt\KnowledgeBase::getInstance(false)->getConfig();

			$this->fail();
		}
		catch (\Erfurt\Exception $e) {
			// Nothing to do here.
		}

		\Erfurt\KnowledgeBase::reset();
	}

	public function testGetEventDispatcher() {
		$ed = \Erfurt\KnowledgeBase::getInstance()->getEventDispatcher();
		$this->assertTrue($ed instanceof \Erfurt\Event_Dispatcher);
	}

	public function testGetLog() {
		\Erfurt\KnowledgeBase::reset();

		$log = \Erfurt\KnowledgeBase::getInstance()->getLog();
		$this->assertTrue($log instanceof Zend_Log);

		$log = \Erfurt\KnowledgeBase::getInstance()->getLog('someOtherLog');
		$this->assertTrue($log instanceof Zend_Log);
	}

	public function testGetLogWithTmpDir() {
		\Erfurt\KnowledgeBase::reset();

		$app = \Erfurt\KnowledgeBase::getInstance();
		$config = $app->getConfig();
		$config->log->level = 7;
		$config->log->path = $app->getTmpDir();

		$log = \Erfurt\KnowledgeBase::getInstance()->getLog('someOtherLog2');
		$this->assertTrue($log instanceof Zend_Log);
	}

	public function testGetLogDir() {
		$app = \Erfurt\KnowledgeBase::getInstance();
		$config = $app->getConfig();

		$config->log->path = 'logs';
		$expectedPath = false;
		$resolvedPath = $app->getLogDir();
		$this->assertEquals($expectedPath, $resolvedPath);

		$config->log->path = '/tmp';
		$expectedPath = '/tmp/';
		$resolvedPath = $app->getLogDir();
		$this->assertEquals($expectedPath, $resolvedPath);

		$config->log->path = '/tmp/';
		$expectedPath = '/tmp/';
		$resolvedPath = $app->getLogDir();
		$this->assertEquals($expectedPath, $resolvedPath);

		unset($config->log->path);
		$expectedPath = false;
		$resolvedPath = $app->getLogDir();
		$this->assertEquals($expectedPath, $resolvedPath);
	}

	public function testGetPluginManager() {
		$pm = \Erfurt\KnowledgeBase::getInstance()->getPluginManager();
		$this->assertTrue($pm instanceof \Erfurt\Plugin_Manager);
	}

	public function testGetQueryCache() {
		$qc = \Erfurt\KnowledgeBase::getInstance()->getQueryCache();
		$this->assertTrue($qc instanceof \Erfurt\Cache_Frontend_QueryCache);
	}

	public function testGetQueryCacheWithNoCacheType() {
		\Erfurt\KnowledgeBase::reset();
		$app = \Erfurt\KnowledgeBase::getInstance();
		$config = $app->getConfig();
		$cacheConfiguration->query->enable = true;

		try {
			$app->getQueryCache();

			$this->fail('Failure expected');
		}
		catch (\Erfurt\Exception $e) {

		}
	}

	public function testGetQueryCacheWithDatabaseCacheBackend() {
		\Erfurt\KnowledgeBase::reset();
		$this->markTestNeedsDatabase();
		$app = \Erfurt\KnowledgeBase::getInstance();
		$config = $app->getConfig();
		$cacheConfiguration->query->enable = true;
		$cacheConfiguration->query->type = 'database';

		$cache = $app->getQueryCache();
		$this->assertTrue($cache instanceof \Erfurt\Cache_Frontend_QueryCache);
	}

	public function testGetQueryCacheWithNonExistingCacheBackend() {
		\Erfurt\KnowledgeBase::reset();
		$app = \Erfurt\KnowledgeBase::getInstance();
		$config = $app->getConfig();
		$cacheConfiguration->query->enable = true;
		$cacheConfiguration->query->type = 'doesnotexist';

		try {
			$app->getQueryCache();

			$this->fail('Failure expected');
		}
		catch (\Erfurt\Exception $e) {

		}
	}

	public function testGetStore() {
		\Erfurt\KnowledgeBase::reset();
		$this->markTestNeedsDatabase();

		$store = \Erfurt\KnowledgeBase::getInstance()->getStore();
		$this->assertTrue($store instanceof \Erfurt\Store);
	}

	public function testGetStoreWithBackendNotSet() {
		\Erfurt\KnowledgeBase::reset();

		$app = \Erfurt\KnowledgeBase::getInstance();

		try {
			$store = \Erfurt\KnowledgeBase::getInstance()->getStore();

			$this->fail();
		}
		catch (\Erfurt\Exception $e) {

		}
	}

	public function testGetStoreWithWrongBackendAndSchema() {
		\Erfurt\KnowledgeBase::reset();

		$configOptions = array(
			'store' => array(
				'backend' => 'somethingwrong',
				'schema' => 'doesnotexist'
			)
		);

		require_once 'Zend/Config.php';
		$tmpConfig = new Zend_Config($configOptions);

		$app = \Erfurt\KnowledgeBase::getInstance(false)->start($tmpConfig);
		$config = $app->getConfig();

		try {
			$store = $app->getStore();

			$this->fail();
		}
		catch (\Erfurt\Exception $e) {

		}
	}

	public function testGetStoreWithCleanDatabase() {
		\Erfurt\KnowledgeBase::reset();
		$this->markTestNeedsCleanZendDbDatabase();

		try {
			$store = \Erfurt\KnowledgeBase::getInstance()->getStore();
		}
		catch (\Erfurt\Exception $e) {
			// Should not fail! Instead should initialize the db tables.
			$this->fail('Something went wrong while initialization of new db environment: ' . $e->getMessage());
		}
	}

	public function testGetSysOntModel() {
		$this->markTestNeedsDatabase();

		$config = \Erfurt\KnowledgeBase::getInstance()->getConfig();
		$sysModelUri = $config->sysont->modelUri;

		$sysModel = \Erfurt\KnowledgeBase::getInstance()->getSysOntModel();
		$this->assertTrue($sysModel instanceof \Erfurt\Rdf\Model);
		$this->assertEquals($sysModelUri, $sysModel->getModelUri());
	}

	public function testGetTmpDir() {
		$tmpDir = \Erfurt\KnowledgeBase::getInstance()->getTmpDir();
		$this->assertTrue($tmpDir !== false);
	}

	public function testGetUsers() {
		$this->markTestNeedsDatabase();

		$users = \Erfurt\KnowledgeBase::getInstance()->getUsers();

		$this->assertTrue(array_key_exists('http://localhost/OntoWiki/Config/Admin', $users));
		$this->assertTrue(array_key_exists('http://ns.ontowiki.net/SysOnt/Anonymous', $users));
	}

	public function testGetVersioning() {
		$v = \Erfurt\KnowledgeBase::getInstance()->getVersioning();
		$this->assertTrue($v instanceof \Erfurt\Versioning);
	}

	public function testGetWrapperManager() {
		$wm = \Erfurt\KnowledgeBase::getInstance()->getWrapperManager();
		$this->assertTrue($wm instanceof \Erfurt\Wrapper_Manager);
	}

	public function testGetWrapperRegistry() {
		$wr = \Erfurt\KnowledgeBase::getInstance()->getWrapperRegistry();
		$this->assertTrue($wr instanceof \Erfurt\Wrapper_Registry);
	}

	public function testIsActionAllowed() {
		$this->markTestNeedsDatabase();

		$app = \Erfurt\KnowledgeBase::getInstance();
		$ac = $app->getAc();

		$this->authenticateAnonymous();

		$this->assertEquals(
			$ac->isActionAllowed('SomeNonExistingAction'),
			$app->isActionAllowed('SomeNonExistingAction')
		);

		// Now test with an existing action (Login)
		$this->assertEquals(
			$ac->isActionAllowed('Login'),
			$app->isActionAllowed('Login')
		);
	}

	public function testIsStarted() {
		$app = \Erfurt\KnowledgeBase::getInstance();
		$this->assertTrue($app->isStarted());
	}

	public function testLoadConfig() {
		$app = \Erfurt\KnowledgeBase::getInstance();
		$app->loadConfig();
	}

	public function testVerifyOpenIdResult() {
		$this->markTestNeedsDatabase();

		$get = array();
		$result = \Erfurt\KnowledgeBase::getInstance()->verifyOpenIdResult($get);
		$this->assertFalse($result->isValid());
	}

}

?>